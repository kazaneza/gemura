import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface PDFExportOptions {
  title: string;
  subtitle?: string;
  data: any;
  type: 'daily' | 'weekly' | 'monthly';
  orientation?: 'portrait' | 'landscape';
}

export const exportToPDF = async (options: PDFExportOptions): Promise<void> => {
  const { title, subtitle, data, type, orientation = 'portrait' } = options;
  
  try {
    // Create PDF document
    const pdf = new jsPDF({
      orientation,
      unit: 'mm',
      format: 'a4'
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    let yPosition = margin;

    // Add logo (placeholder - you can replace with actual logo)
    const logoText = 'GEMURA';
    pdf.setFontSize(24);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(220, 38, 38); // Red color
    pdf.text(logoText, margin, yPosition);
    yPosition += 15;

    // Add title
    pdf.setFontSize(18);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 0, 0);
    pdf.text(title, margin, yPosition);
    yPosition += 10;

    // Add subtitle if provided
    if (subtitle) {
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(100, 100, 100);
      pdf.text(subtitle, margin, yPosition);
      yPosition += 10;
    }

    // Add generation date
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Generated on: ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}`, margin, yPosition);
    yPosition += 15;

    // Add line separator
    pdf.setDrawColor(200, 200, 200);
    pdf.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 10;

    // Generate content based on report type
    switch (type) {
      case 'daily':
        yPosition = await addDailyReportContent(pdf, data, margin, yPosition, pageWidth, pageHeight);
        break;
      case 'weekly':
        yPosition = await addWeeklyReportContent(pdf, data, margin, yPosition, pageWidth, pageHeight);
        break;
      case 'monthly':
        yPosition = await addMonthlyReportContent(pdf, data, margin, yPosition, pageWidth, pageHeight);
        break;
    }

    // Add footer
    const footerY = pageHeight - 15;
    pdf.setFontSize(8);
    pdf.setTextColor(100, 100, 100);
    pdf.text('Generated by GEMURA - Cost Per Meal Management System', margin, footerY);
    pdf.text(`Page 1`, pageWidth - margin - 20, footerY);

    // Save the PDF
    const fileName = `${type}_report_${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);

  } catch (error) {
    console.error('PDF export failed:', error);
    throw new Error('Failed to export PDF. Please try again.');
  }
};

const addDailyReportContent = async (
  pdf: jsPDF, 
  data: any, 
  margin: number, 
  yPosition: number, 
  pageWidth: number, 
  pageHeight: number
): Promise<number> => {
  // Summary section
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Daily Summary', margin, yPosition);
  yPosition += 10;

  // Summary cards
  const summaryData = [
    { label: 'Total Meals', value: data.totalMeals?.toLocaleString() || '0' },
    { label: 'Ingredient Cost', value: `RWF ${data.totalIngredientCost?.toLocaleString() || '0'}` },
    { label: 'Cost per Meal', value: `RWF ${Math.round(data.costPerMeal || 0).toLocaleString()}` },
    { label: 'Total CPM', value: `RWF ${Math.round(data.totalCPM || 0).toLocaleString()}` }
  ];

  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  
  summaryData.forEach((item, index) => {
    const x = margin + (index % 2) * 85;
    const y = yPosition + Math.floor(index / 2) * 15;
    
    pdf.setFont('helvetica', 'bold');
    pdf.text(`${item.label}:`, x, y);
    pdf.setFont('helvetica', 'normal');
    pdf.text(item.value, x, y + 5);
  });
  
  yPosition += 35;

  // Purchases table
  if (data.purchases && data.purchases.length > 0) {
    yPosition = addTableSection(pdf, 'Ingredients Purchased', [
      'Ingredient', 'Quantity', 'Unit Price', 'Total Price'
    ], data.purchases.map((p: any) => [
      p.ingredient?.name || 'Unknown',
      p.quantity?.toString() || '0',
      `RWF ${p.unitPrice?.toLocaleString() || '0'}`,
      `RWF ${p.totalPrice?.toLocaleString() || '0'}`
    ]), margin, yPosition, pageWidth);
  }

  // Productions table
  if (data.productions && data.productions.length > 0) {
    yPosition = addTableSection(pdf, 'Food Production by Hospital', [
      'Hospital', 'Service', 'Patients Served'
    ], data.productions.map((p: any) => [
      p.hospital?.name || 'Unknown',
      p.service || 'Unknown',
      (p.patientsServed || 0).toLocaleString()
    ]), margin, yPosition, pageWidth);
  }

  return yPosition;
};

const addWeeklyReportContent = async (
  pdf: jsPDF, 
  data: any, 
  margin: number, 
  yPosition: number, 
  pageWidth: number, 
  pageHeight: number
): Promise<number> => {
  // Weekly summary
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Weekly Summary', margin, yPosition);
  yPosition += 10;

  const summaryData = [
    { label: 'Total Meals', value: data.totalMealsServed?.toLocaleString() || '0' },
    { label: 'Ingredient Cost', value: `RWF ${data.totalIngredientCost?.toLocaleString() || '0'}` },
    { label: 'Cost per Meal', value: `RWF ${Math.round(data.costPerMeal || 0).toLocaleString()}` },
    { label: 'Total CPM', value: `RWF ${Math.round(data.totalCPM || 0).toLocaleString()}` }
  ];

  pdf.setFontSize(10);
  summaryData.forEach((item, index) => {
    const x = margin + (index % 2) * 85;
    const y = yPosition + Math.floor(index / 2) * 15;
    
    pdf.setFont('helvetica', 'bold');
    pdf.text(`${item.label}:`, x, y);
    pdf.setFont('helvetica', 'normal');
    pdf.text(item.value, x, y + 5);
  });
  
  yPosition += 35;

  // Service breakdown if available
  if (data.serviceBreakdown) {
    yPosition = addTableSection(pdf, 'Service-Based Analysis', [
      'Service', 'Meals', 'Cost/Meal', 'Total CPM'
    ], Object.entries(data.serviceBreakdown).map(([service, serviceData]: [string, any]) => [
      service,
      serviceData.totalMeals?.toLocaleString() || '0',
      `RWF ${Math.round(serviceData.costPerMeal || 0).toLocaleString()}`,
      `RWF ${Math.round(serviceData.totalCPM || 0).toLocaleString()}`
    ]), margin, yPosition, pageWidth);
  }

  return yPosition;
};

const addMonthlyReportContent = async (
  pdf: jsPDF, 
  data: any, 
  margin: number, 
  yPosition: number, 
  pageWidth: number, 
  pageHeight: number
): Promise<number> => {
  // Monthly summary
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Monthly Summary', margin, yPosition);
  yPosition += 10;

  const summaryData = [
    { label: 'Total Meals', value: data.totalMealsServed?.toLocaleString() || '0' },
    { label: 'Ingredient Cost', value: `RWF ${data.totalIngredientCosts?.toLocaleString() || '0'}` },
    { label: 'Indirect Costs', value: `RWF ${data.totalIndirectCosts?.toLocaleString() || '0'}` },
    { label: 'Average CPM', value: `RWF ${Math.round(data.totalCPM || 0).toLocaleString()}` }
  ];

  pdf.setFontSize(10);
  summaryData.forEach((item, index) => {
    const x = margin + (index % 2) * 85;
    const y = yPosition + Math.floor(index / 2) * 15;
    
    pdf.setFont('helvetica', 'bold');
    pdf.text(`${item.label}:`, x, y);
    pdf.setFont('helvetica', 'normal');
    pdf.text(item.value, x, y + 5);
  });
  
  yPosition += 35;

  // Weekly breakdown if available
  if (data.weeklyBreakdown && data.weeklyBreakdown.length > 0) {
    yPosition = addTableSection(pdf, 'Weekly Breakdown', [
      'Week', 'Meals', 'Ingredients', 'Cost/Meal', 'Total CPM'
    ], data.weeklyBreakdown.map((week: any) => [
      `Week ${week.weekNumber}`,
      week.mealsServed?.toLocaleString() || '0',
      `RWF ${week.ingredientCost?.toLocaleString() || '0'}`,
      `RWF ${Math.round(week.costPerMeal || 0).toLocaleString()}`,
      `RWF ${Math.round(week.totalCPM || 0).toLocaleString()}`
    ]), margin, yPosition, pageWidth);
  }

  return yPosition;
};

const addTableSection = (
  pdf: jsPDF,
  title: string,
  headers: string[],
  rows: string[][],
  margin: number,
  yPosition: number,
  pageWidth: number
): number => {
  // Section title
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'bold');
  pdf.text(title, margin, yPosition);
  yPosition += 8;

  // Table setup
  const tableWidth = pageWidth - 2 * margin;
  const colWidth = tableWidth / headers.length;
  const rowHeight = 8;

  // Table headers
  pdf.setFillColor(240, 240, 240);
  pdf.rect(margin, yPosition, tableWidth, rowHeight, 'F');
  
  pdf.setFontSize(9);
  pdf.setFont('helvetica', 'bold');
  headers.forEach((header, index) => {
    pdf.text(header, margin + index * colWidth + 2, yPosition + 5);
  });
  yPosition += rowHeight;

  // Table rows
  pdf.setFont('helvetica', 'normal');
  rows.forEach((row, rowIndex) => {
    if (rowIndex % 2 === 1) {
      pdf.setFillColor(250, 250, 250);
      pdf.rect(margin, yPosition, tableWidth, rowHeight, 'F');
    }
    
    row.forEach((cell, colIndex) => {
      pdf.text(cell, margin + colIndex * colWidth + 2, yPosition + 5);
    });
    yPosition += rowHeight;
  });

  // Table border
  pdf.setDrawColor(200, 200, 200);
  pdf.rect(margin, yPosition - (rows.length + 1) * rowHeight, tableWidth, (rows.length + 1) * rowHeight);

  return yPosition + 10;
};

// Alternative method using HTML to Canvas for complex layouts
export const exportHTMLToPDF = async (
  elementId: string,
  filename: string,
  title: string
): Promise<void> => {
  try {
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error('Element not found');
    }

    // Create a clone of the element for PDF generation
    const clone = element.cloneNode(true) as HTMLElement;
    clone.style.width = '210mm'; // A4 width
    clone.style.backgroundColor = 'white';
    clone.style.padding = '20mm';
    
    // Temporarily add to document
    document.body.appendChild(clone);

    const canvas = await html2canvas(clone, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff'
    });

    // Remove the clone
    document.body.removeChild(clone);

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('portrait', 'mm', 'a4');
    
    const imgWidth = 210; // A4 width in mm
    const pageHeight = 295; // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    // Add logo and title
    pdf.setFontSize(24);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(220, 38, 38);
    pdf.text('GEMURA', 20, 20);
    
    pdf.setFontSize(16);
    pdf.setTextColor(0, 0, 0);
    pdf.text(title, 20, 35);
    
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);

    // Add the content
    pdf.addImage(imgData, 'PNG', 0, 50, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    pdf.save(filename);
  } catch (error) {
    console.error('HTML to PDF export failed:', error);
    throw new Error('Failed to export PDF. Please try again.');
  }
};